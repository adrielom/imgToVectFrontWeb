{"version":3,"sources":["components/ImageImporter/index.tsx","utils/Colors.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["url","ImageImporter","useState","imageSource","setImageSource","x","slider","setSlider","typeValue","setTypeValue","svg","setSvg","servedImageName","setServedImageName","setImgName","imgServedName","setImgServedName","useEffect","setTimeout","img","buttonRef","useRef","fetchSVGImage","name","type","threshold","axios","get","then","res","blob","Blob","data","URL","createObjectURL","SliderToRequest","sliderValue","Math","floor","className","id","htmlFor","src","alt","accept","onChange","e","target","files","file","formData","FormData","append","post","headers","originalName","catch","err","console","log","serveImage","axis","styles","track","backgroundColor","width","active","thumb","height","disabled","opacity","state","onDragEnd","selectedIndex","value","ref","onClick","element","document","createElement","download","split","href","click","remove","current","blur","downloadSVG","RenderOptionSection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8bec88d2.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './index.scss'\nimport { FaPlusCircle } from 'react-icons/fa'\nimport { SiConvertio } from 'react-icons/si'\nimport { BiVector } from 'react-icons/bi'\nimport Slider from 'react-input-slider';\nimport { secondaryColor, lightGreyColor } from '../../utils/Colors'\nimport axios from 'axios'\n\nconst url = \"https://image-to-vector.herokuapp.com/\"\n\n\nfunction ImageImporter() {\n    const [imageSource, setImageSource] = useState('')\n    const [slider, setSlider] = useState({ x: 72 });\n    const [typeValue, setTypeValue] = useState(0)\n    const [svg, setSvg] = useState('')\n    const [servedImageName, setServedImageName] = useState('')\n    const [imgName, setImgName] = useState('')\n    const [imgServedName, setImgServedName] = useState('')\n\n\n    useEffect(() => {\n        setTimeout(() => {\n            setImageSource('')\n            setSvg('')\n            setImgName('')\n            setServedImageName('')\n        }, 840000);\n    }, [imageSource])\n\n    let img: any = {}\n\n    const buttonRef = useRef<HTMLButtonElement>(null)\n\n    const fetchSVGImage = (name: string, type: number, threshold: number) => {\n        if (type === 0) {\n            //https://image-to-vector.herokuapp.com/tracing?id=1&name=952bbab97d987d92891db98a8b6ec722&color=black&threshold=110\n            axios.get(url + `tracing?id=${name}&name=${name}&color=black&threshold=${threshold}`).then(res => {\n\n                let blob = new Blob([res.data], { type: 'image/svg+xml' });\n                let url = URL.createObjectURL(blob);\n\n                setSvg(url)\n            })\n        } else {\n            // http://localhost:8080/posterize?name=5bc7e25e5891c315b5440930a31f7602&threshold=180&steps=5\n            axios.get(url + `posterize?name=${name}&threshold=${threshold}&steps=${type}`).then(res => {\n\n                let blob = new Blob([res.data], { type: 'image/svg+xml' });\n                let url = URL.createObjectURL(blob);\n\n                setSvg(url)\n            })\n        }\n    }\n\n    function downloadSVG() {\n        const element = document.createElement(\"a\");\n        console.log(imgServedName)\n        element.download = imgServedName.split('.')[0];\n        console.log(svg)\n        element.href = svg;\n        element.click();\n        element.remove();\n        buttonRef.current?.blur()\n    }\n\n    function SliderToRequest(sliderValue: number) {\n        return Math.floor(sliderValue * 2.55)\n    }\n\n    const serveImage = (file: any) => {\n        const formData = new FormData();\n        formData.append('name', file)\n\n        return axios.post(url + 'imgToVector', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then((res) => {\n            img = res.data\n            setImgName(res.data.name)\n            setImgServedName(res.data.originalName)\n            setServedImageName(img.name)\n            fetchSVGImage(img.name, typeValue, SliderToRequest(slider.x))\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const ImageChange = (e: any) => {\n        setImageSource('')\n        setSvg('')\n        setImgName('')\n        setImgServedName('')\n        setServedImageName('')\n        setImageSource(URL.createObjectURL(e.target.files[0]))\n        serveImage(e.target.files[0])\n    }\n\n    const RenderOptionSection = () => {\n        if (imageSource !== '') {\n            return (\n                <div className=\"optionsSection\">\n                    <div id=\"sliderContainer\">\n                        <label>NÃ­vel de detalhe: {slider.x} % </label>\n                        <Slider\n                            axis=\"x\"\n                            x={slider.x}\n                            styles={{\n                                track: {\n                                    backgroundColor: lightGreyColor,\n                                    width: \"100%\"\n                                },\n                                active: {\n                                    backgroundColor: secondaryColor\n                                },\n                                thumb: {\n                                    width: 10,\n                                    height: 10\n                                },\n                                disabled: {\n                                    opacity: 0.5\n                                },\n\n                            }}\n                            onChange={({ x }) => {\n                                setSlider(state => ({ ...state, x }))\n                            }}\n                            onDragEnd={() => {\n                                setSvg('')\n                                console.log('drag ended')\n                                if (imageSource !== '' && servedImageName !== '')\n                                    fetchSVGImage(servedImageName, typeValue, SliderToRequest(slider.x))\n                            }}\n                        />\n                    </div>\n                    <div className=\"detailContainer\">\n                        <label>Tipo de detalhe:  </label>\n\n                        <select onChange={(e) => {\n                            setSvg('')\n                            setTypeValue(e.target.selectedIndex)\n                            fetchSVGImage(servedImageName, typeValue, SliderToRequest(slider.x))\n                        }} id=\"detailLevel\">\n                            <option value=\"1\">TraÃ§o</option>\n                            <option value=\"2\">Baixa</option>\n                            <option value=\"3\">MÃ©dia</option>\n                            <option value=\"4\">Alta</option>\n                            <option value=\"5\">Muito Alta</option>\n                        </select>\n\n                    </div>\n                    <div className=\"buttonsSection\">\n                        <button ref={buttonRef} onClick={() => downloadSVG()}>\n                            Download\n                            <BiVector className=\"svgIcon\" />\n                        </button>\n                    </div>\n                </div >\n            )\n        }\n    }\n\n    const RenderPreviewImage = () => {\n        if (imageSource !== '') {\n            return (\n                <div className=\"renderPreviewContainer\">\n                    <div className=\"imageCenterContainer\">\n                        <label htmlFor=\"imageSource\"> <FaPlusCircle className=\"iconImage opacity04\" /> </label>\n                        <img src={imageSource} className=\"previewImage\" alt={'previewImage'} />\n                    </div>\n                    <div>\n                        <SiConvertio id=\"convertIcon\" className=\"iconImageSmall\" />\n                    </div>\n                    <div className=\"imageCenterContainer\">\n                        {\n                            svg === '' || imageSource === '' ? 'carregando...' : <img src={svg} className=\"previewImage\" alt={'previewImage'} />\n                        }\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <label htmlFor=\"imageSource\"> <FaPlusCircle className=\"iconImage iconImageDeselected\" /> </label>\n            )\n        }\n    }\n\n    return (\n        <>\n            <div className=\"card\">\n                {imageSource === '' ? <h1 className=\"title\">Selecione uma imagem</h1> : ''}\n                <div id=\"imageImporterSection\" className={imageSource === '' ? 'height75vh' : ''}>\n                    {RenderPreviewImage()}\n\n                    <input id=\"imageSource\" accept=\".png, .jpg, .jpeg\" alt='imgage source' type='file' onChange={ImageChange} />\n                </div>\n                {RenderOptionSection()}\n            </div>\n        </>\n    );\n}\n\nexport default ImageImporter;","let greyColor: string = '#515360';\nlet secondaryColor: string = '#e981c7';\nlet secondaryColorLight: string = '#eb8dcc';\nlet primaryColor: string = '#4cd3ec';\nlet lightPrimaryColor: string = '#d9f5fb';\nlet lighterPrimaryColor: string = '#edfafd';\nlet darkPrimaryColor: string = '#70c1e4';\nlet terciaryPrimaryColor: string = '#a3a4dc';\nlet terciaryPrimaryColorLighter: string = '#f8f8fc';\nlet lightGreyColor: string = \"#a6a6a6\";\nlet lighterGreyColor: string = \"#c0c0c0\";\n\nexport { greyColor, terciaryPrimaryColorLighter, lighterPrimaryColor, secondaryColor, secondaryColorLight, darkPrimaryColor, terciaryPrimaryColor, lightPrimaryColor, primaryColor, lightGreyColor, lighterGreyColor }","import React from 'react';\nimport ImageImporter from './components/ImageImporter';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <section>\n        <ImageImporter />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}